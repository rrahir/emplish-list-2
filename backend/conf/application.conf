# https://www.playframework.com/documentation/latest/Configuration

# Comment the following line when going into production
include "secrets.conf"

debug = true

apiPrefix = api

# Default database configuration using Postgres database engine
slick.dbs.default {
  db = {
    #url = "jdbc:sqlite:database/emplishlistdb.db"
    url = ${?JDBC_DATABASE_URL}//${?DATABASE_URL}
    #driver = "org.sqlite.JDBC"
    driver = "org.postgresql.Driver"
  }
  #profile = "slick.jdbc.SQLiteProfile$"
  profile = "slick.jdbc.PostgresProfile$"
  numThreads = 1
}

play.http.secret.key = ${?APPLICATION_SECRET}

play.evolutions.autoApply = true

//play.filters.csrf.header.bypassHeaders {
//  X-Requested-With = "*"
//  Csrf-Token = "nocheck"
//}

play.filters.hosts {
  allowed = ["."]
}

play.http {
  session {
    maxAge = 172800000
  }
}

play.modules.enabled += "tasks.TasksModule"

hikaricp {
  minimumIdle = 1
  maximumPoolSize = 1
}


adminUser {
  name = Antoine
  password = ${?ADMIN_PASSWORD}  # environment variable that should not be committed to git...
}

mail {
  password = ${?MAIL_PASSWORD}
}

origin = ${?ORIGIN}

## CSRF Filter
# https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
# https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
# ~~~~~
# Play supports multiple methods for verifying that a request is not a CSRF request.
# The primary mechanism is a CSRF token. This token gets placed either in the query string
# or body of every form submitted, and also gets placed in the users session.
# Play then verifies that both tokens are present and match.
csrf {
  cookie.name = "Csrf-Token"

  # Sets the cookie to be sent only over HTTPS
  #cookie.secure = true

  # Defaults to CSRFErrorHandler in the root package.
  #errorHandler = MyCSRFErrorHandler
}
