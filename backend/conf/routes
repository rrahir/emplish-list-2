# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~

# An example controller showing a sample home page
### NoDocs ###
GET     /                               controllers.HomeController.index
GET     /api/hello                      controllers.HomeController.hello
POST    /api/hello/:nbr                 controllers.HomeController.helloNbr(nbr: Int)
GET     /api/hello/:nbr                 controllers.HomeController.helloNbr(nbr: Int)
GET     /todo                           controllers.HomeController.todo

# Users
GET     /api/me                                controllers.UsersController.user
GET     /api/am-i-admin                        controllers.UsersController.amIAdmin
POST    /api/login                             controllers.UsersController.login
POST    /api/logout                            controllers.UsersController.logout
POST    /api/register                          controllers.UsersController.register
GET     /api/users/all-users-names             controllers.UsersController.usersNames
POST    /api/accept-user                       controllers.UsersController.addPreRegisteredUser(userName, randomKey)
POST    /api/reject-user                       controllers.UsersController.rejectPreRegisteredUser(userName, randomKey)
POST    /api/delete-user                       controllers.UsersController.deleteUserRoute(userName)
GET     /api/registration/registration-email                controllers.UsersController.pendingRegistrationEmail(userName, randomKey)
GET     /api/registration/pending-registrations             controllers.UsersController.downloadPendingRegistrations(limit: Int = 5)
GET     /api/registration/pending-registrations/:limit      controllers.UsersController.downloadPendingRegistrations(limit: Int)

# Ingredients

###
#  summary: Retrieve all ingredients
#  tags:
#    - Ingredient Endpoints
#  responses:
#    200:
#      description: success
#      schema:
#        type: "array"
#        items:
#          $ref: '#/definitions/models.emplishlist.Ingredient'
###
GET     /api/ingredients/ingredients                controllers.IngredientsController.allIngredients
###
#  summary: Retrieve ingredient by id
#  tags:
#    - Ingredient Endpoints
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/models.emplishlist.Ingredient'
###
GET     /api/ingredients/get-ingredient             controllers.IngredientsController.fetchIngredient(id: Int)
###
#  summary: Retrieve all ingredient units
#  tags:
#    - Ingredient Endpoints
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/models.emplishlist.IngredientUnit'
###
GET     /api/ingredients/units                      controllers.IngredientsController.allUnits
###
#  summary: Retrieve all ingredient stores
#  tags:
#    - Ingredient Endpoints
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/models.emplishlist.Store'
###
GET     /api/ingredients/stores                     controllers.IngredientsController.allStores
###
#  summary: Retrieve all ingredient stores
#  tags:
#    - Ingredient Endpoints
#  responses:
#    200:
#      description: success
#      schema:
#        type: "array"
#        items:
#          "string"
###
GET     /api/ingredients/tags                       controllers.IngredientsController.tags
###
#  summary: Adds the given ingredient to the list
#  tags:
#    - Ingredient Endpoints
#  parameters:
#    - name: body
#      schema:
#        $ref: '#/definitions/models.emplishlist.Ingredient'
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/models.emplishlist.Ingredient'
###
POST    /api/ingredients/add-ingredient             controllers.IngredientsController.newIngredient
###
#  summary: Updates the given ingredient to the list
#  tags:
#    - Ingredient Endpoints
#  parameters:
#    - name: body
#      schema:
#        $ref: '#/definitions/models.emplishlist.Ingredient'
#  responses:
#    200:
#      description: success
#      schema:
#        $ref: '#/definitions/models.emplishlist.Ingredient'
###
POST    /api/ingredients/update-ingredient          controllers.IngredientsController.updateIngredientRoute

# Recipes
GET     /api/recipes/recipes                        controllers.RecipesController.fetchAllRecipes
GET     /api/recipes/db-recipes                     controllers.RecipesController.fetchAllDBRecipes
GET     /api/recipes/get                            controllers.RecipesController.fetchRecipeById(recipeId: Int)
POST    /api/recipes/new-recipe                     controllers.RecipesController.addRecipe
POST    /api/recipes/update-recipe                  controllers.RecipesController.updateRecipe

### NoDocs ###
GET   /docs/swagger-ui/*file        controllers.HomeController.swagger(path:String="/public/lib/swagger-ui", file:String)

# Map static resources from the /public folder to the /assets URL path
### NoDocs ###
#GET   /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
# Serve static assets under public directory. KEEP THIS ROUTE AT THE END OF THIS FILE.
### NoDocs ###
GET     /*file                      controllers.HomeController.assetOrDefault(file)